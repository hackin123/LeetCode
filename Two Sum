#Given an array of integers, return indices of the two numbers such that they add up to a specific target.

#You may assume that each input would have exactly one solution, and you may not use the same element twice.
# Solved using One Pass Hash Table Method - 90% faster than bruteforce
# Time Complexity - O(n), Space Complexity - O(n). Hash table/dictionary needs space for storing n elements.

#Given nums = [2, 7, 11, 15], target = 9,

#Because nums[0] + nums[1] = 2 + 7 = 9,
#return [0, 1].
################################################

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        two_sum = {}
        complement = 0
        
        for i in range(len(nums)):
            complement = target-nums[i]
            if complement in two_sum:
                return [two_sum[complement],i]
            two_sum[nums[i]] = i
            
        
