'''
Question : Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:

If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:

Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]
Example 2:

Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
             But it is larger in lexical order.
######################################
'''
#Code : 
if not tickets :
            return 
        import collections
        tickets_dict = collections.defaultdict(list)
        
        for src,destination in tickets:
            tickets_dict[src].append(destination)
            
        result = ["JFK"]
        
        def dfs(src):
            
            if len(result)== len(tickets)+1 :
                return True
            destinations = sorted(tickets_dict[src])
            for destination in destinations :
                result.append(destination)
                tickets_dict[src].remove(destination)
                if dfs(destination):
                    return True                
                tickets_dict[src].append(destination)
                result.pop()
        dfs("JFK")
        
        return result
